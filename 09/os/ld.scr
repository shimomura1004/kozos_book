OUTPUT_FORMAT("elf32-h8300")
OUTPUT_ARCH(h8300h)

/* start シンボルをエントリポイントとする */
ENTRY("_start")

/* H7 に合わせたメモリ配置 */
/* ROM には何もロードしないので RAM の設定だけ行う */
/* o = origin, l = length */
MEMORY
{
    ramall(rwx)     : o = 0xffbf20, l = 0x004000 /* 16KB */
    softvec(rw)     : o = 0xffbf20, l = 0x000040 /* ソフトウェア割込みベクタの領域 */
    /* ELFヘッダ、プログラムヘッダもロードされるので、先頭を少し(0x100 = 256バイト)あけておく */
    ram(rwx)        : o = 0xffc020, l = 0x003f00
    userstack(rw)   : o = 0xfff400, l = 0x000000
    bootstack(rw)   : o = 0xffff00, l = 0x000000
    intrstack(rw)   : o = 0xffff00, l = 0x000000
}

SECTIONS
{
    .softvec : {
        _softvec = .;
    } > softvec

    /* オブジェクトファイルのテキストセクションを集める */
    .text : {
        /* text セクションの先頭を表すシンボルを配置 */
        /* シンボルはすべてアドレスにつけた名前 */
        /* 他の C コードから text_start という名前で参照できる */
        _text_start = . ;
        /* text セクションにオブジェクトファイルの text を配置 */
        *(.text)
        /* text セクションの終端を表すシンボルを配置 */
        _etext = .;
    } > ram

    .rodata : {
        /* 先頭アドレスにシンボルを配置、シンボル名は _ で始めると C から参照しやすい */
        _rodata_start = . ;
        *(.strings)
        *(.rodata)
        *(.rodata.*)
        _erodata = . ;
    } > ram

    .data : {
        _data_start = . ;
        *(.data)
        _edata = . ;
    } > ram
    /* AT>rom は物理アドレスの指定、物理アドレスは ROM 上に設定される */

    .bss : {
        _bss_start = . ;
        *(.bss)
        *(COMMON)
        _ebss = . ;
    } > ram

    /* 4バイトのアラインメント、カレントのアドレスを4の倍数に揃える */
    . = ALIGN(4);
    /* セクションの最後にシンボルを配置 */
    _end = . ;

    .userstack : {
        _userstack = .;
    } > userstack

    .bootstack : {
        _bootstack = .;
    } > bootstack

    .intrstack : {
        _intrstack = .;
    } > intrstack
}
